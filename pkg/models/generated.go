// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	ID        string      `json:"id"`
	Name      string      `json:"name"`
	Available MoneyAmount `json:"available"`
	Expenses  []*Expense  `json:"expenses"`
	Transfers []*Transfer `json:"transfers"`
}

type BudgetPlan struct {
	ID     string      `json:"id"`
	Date   *string     `json:"date"`
	From   *Envelope   `json:"from"`
	To     *Account    `json:"to"`
	Amount MoneyAmount `json:"amount"`
}

type Envelope struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Available   MoneyAmount   `json:"available"`
	Expenses    []*Expense    `json:"expenses"`
	BudgetPlans []*BudgetPlan `json:"budgetPlans"`
}

type ExpenseEntry struct {
	Title    string      `json:"title"`
	Category *Category   `json:"category"`
	Amount   MoneyAmount `json:"amount"`
}

type Transfer struct {
	ID     string      `json:"id"`
	Date   *string     `json:"date"`
	From   *Account    `json:"from"`
	To     *Account    `json:"to"`
	Amount MoneyAmount `json:"amount"`
}

type Direction string

const (
	DirectionIn   Direction = "IN"
	DirectionOut  Direction = "OUT"
	DirectionBoth Direction = "BOTH"
)

var AllDirection = []Direction{
	DirectionIn,
	DirectionOut,
	DirectionBoth,
}

func (e Direction) IsValid() bool {
	switch e {
	case DirectionIn, DirectionOut, DirectionBoth:
		return true
	}
	return false
}

func (e Direction) String() string {
	return string(e)
}

func (e *Direction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Direction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Direction", str)
	}
	return nil
}

func (e Direction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
