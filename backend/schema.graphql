scalar Date

type MoneyAmount {
  integer: Int!
  decimal: Int!
}

type Expense {
  id: ID!
  title: String!
  location: String
  entries: [ExpenseEntry!]!
  totalBalance: MoneyAmount!
  date: Date
  account: Account
}

type ExpenseEntry {
  id: ID!
  title: String!
  category: Category!
  balance: MoneyAmount!
}

type Category {
  id: ID!
  name: String!
  description: String
  envelope: Envelope!
}

type Account {
  id: ID!
  name: String!
  balance: MoneyAmount!
}

type Envelope {
  id: ID!
  name: String!
  balance: MoneyAmount!
}

type AccountTransfer {
  id: ID!
  date: Date
  from: Account
  to: Account
  amount: MoneyAmount!
}

type EnvelopeTransfer {
  id: ID!
  date: Date
  from: Envelope
  to: Account
  amount: MoneyAmount!
}

type Budget {
  id: ID
  expenses: [Expense!]!
}

type Query {
  budget(id: ID!): Budget
  budgets: [Budget!]!
}

input ExpenseInput {
  title: String!
  location: String
  entries: [ExpenseEntryInput!]!
  totalBalance: MoneyAmountInput!
  date: Date
  accountID: ID
}

input ExpenseEntryInput {
  title: String!
  categoryID: ID!
  balance: MoneyAmountInput!
}

input MoneyAmountInput {
  integer: Int!
  decimal: Int!
}

interface BudgetMutation {
  createExpense(input: ExpenseInput!): Expense
  deleteExpense(id: ID!): Expense
  updateExpense(id: ID!, input: ExpenseInput!): Expense
}

type Mutation {
  createBudget(name: String!): Budget
  budget(id: ID!): BudgetMutation
}

enum EventType {
  CREATED
  DELETED
  UPDATED
}

type ExpenseEvent {
  type: EventType!
  expense: Expense
}

type Subscription {
  expenseEvent(budgetID: ID!): ExpenseEvent!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
