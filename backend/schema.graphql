scalar Time

scalar Amount

type Category {
  id: ID!
  name: String!
  envelope: Envelope!
}
input CategoryInput {
  name: String!
  envelopeID: ID!
}
input CategoryUpdate {
  name: String
  envelopeID: ID
}

type Account {
  id: ID!
  name: String!
  balance: Amount!
}
input AccountInput {
  name: String!
}
input AccountUpdate {
  name: String
}

type Envelope {
  id: ID!
  name: String!
  balance: Amount!
  limit: Amount
}
input EnvelopeInput {
  name: String!
  limit: Amount
}
input EnvelopeUpdate {
  name: String
  limit: Amount
}

type Budget {
  id: ID!
  accounts: [Account!]!
  account(id: ID!): Account
  envelopes: [Envelope!]!
  envelope(id: ID!): Envelope
  categories(filter: CategoriesFilter): [Category!]!
  category(id: ID!): Category
}
input CategoriesFilter {
  envelopeID: ID
}

type Query {
  budget(id: ID!): Budget
  budgets: [Budget!]!
}

type Mutation {
  createBudget: Budget
  createAccount(budgetID: ID!, in: AccountInput!): Account
  updateAccount(budgetID: ID!, id: ID!, in: AccountUpdate!): Account
  createEnvelope(budgetID: ID!, in: EnvelopeInput!): Envelope
  updateEnvelope(budgetID: ID!, id: ID!, in: EnvelopeUpdate!): Envelope
  createCategory(budgetID: ID!, in: CategoryInput!): Category
  updateCategory(budgetID: ID!, id: ID!, in: CategoryUpdate!): Category
}

schema {
  query: Query
  mutation: Mutation
}
