// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sjanota/budget/backend/pkg/resolver (interfaces: MutationResolverStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sjanota/budget/backend/pkg/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockMutationResolverStorage is a mock of MutationResolverStorage interface
type MockMutationResolverStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMutationResolverStorageMockRecorder
}

// MockMutationResolverStorageMockRecorder is the mock recorder for MockMutationResolverStorage
type MockMutationResolverStorageMockRecorder struct {
	mock *MockMutationResolverStorage
}

// NewMockMutationResolverStorage creates a new mock instance
func NewMockMutationResolverStorage(ctrl *gomock.Controller) *MockMutationResolverStorage {
	mock := &MockMutationResolverStorage{ctrl: ctrl}
	mock.recorder = &MockMutationResolverStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMutationResolverStorage) EXPECT() *MockMutationResolverStorageMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockMutationResolverStorage) CreateAccount(arg0 context.Context, arg1 primitive.ObjectID, arg2 *models.AccountInput) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockMutationResolverStorageMockRecorder) CreateAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockMutationResolverStorage)(nil).CreateAccount), arg0, arg1, arg2)
}

// CreateBudget mocks base method
func (m *MockMutationResolverStorage) CreateBudget(arg0 context.Context, arg1 primitive.ObjectID, arg2 models.Month) (*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudget", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBudget indicates an expected call of CreateBudget
func (mr *MockMutationResolverStorageMockRecorder) CreateBudget(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudget", reflect.TypeOf((*MockMutationResolverStorage)(nil).CreateBudget), arg0, arg1, arg2)
}

// CreateCategory mocks base method
func (m *MockMutationResolverStorage) CreateCategory(arg0 context.Context, arg1 primitive.ObjectID, arg2 *models.CategoryInput) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory
func (mr *MockMutationResolverStorageMockRecorder) CreateCategory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockMutationResolverStorage)(nil).CreateCategory), arg0, arg1, arg2)
}

// CreateEnvelope mocks base method
func (m *MockMutationResolverStorage) CreateEnvelope(arg0 context.Context, arg1 primitive.ObjectID, arg2 *models.EnvelopeInput) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelope", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvelope indicates an expected call of CreateEnvelope
func (mr *MockMutationResolverStorageMockRecorder) CreateEnvelope(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelope", reflect.TypeOf((*MockMutationResolverStorage)(nil).CreateEnvelope), arg0, arg1, arg2)
}

// CreateMonthlyReport mocks base method
func (m *MockMutationResolverStorage) CreateMonthlyReport(arg0 context.Context, arg1 primitive.ObjectID, arg2 *models.MonthlyReportInput) (*models.MonthlyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonthlyReport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.MonthlyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonthlyReport indicates an expected call of CreateMonthlyReport
func (mr *MockMutationResolverStorageMockRecorder) CreateMonthlyReport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonthlyReport", reflect.TypeOf((*MockMutationResolverStorage)(nil).CreateMonthlyReport), arg0, arg1, arg2)
}

// UpdateAccount mocks base method
func (m *MockMutationResolverStorage) UpdateAccount(arg0 context.Context, arg1, arg2 primitive.ObjectID, arg3 models.Changes) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockMutationResolverStorageMockRecorder) UpdateAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockMutationResolverStorage)(nil).UpdateAccount), arg0, arg1, arg2, arg3)
}

// UpdateCategory mocks base method
func (m *MockMutationResolverStorage) UpdateCategory(arg0 context.Context, arg1, arg2 primitive.ObjectID, arg3 models.Changes) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockMutationResolverStorageMockRecorder) UpdateCategory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockMutationResolverStorage)(nil).UpdateCategory), arg0, arg1, arg2, arg3)
}

// UpdateEnvelope mocks base method
func (m *MockMutationResolverStorage) UpdateEnvelope(arg0 context.Context, arg1, arg2 primitive.ObjectID, arg3 models.Changes) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvelope indicates an expected call of UpdateEnvelope
func (mr *MockMutationResolverStorageMockRecorder) UpdateEnvelope(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelope", reflect.TypeOf((*MockMutationResolverStorage)(nil).UpdateEnvelope), arg0, arg1, arg2, arg3)
}
