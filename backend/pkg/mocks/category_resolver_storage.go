// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sjanota/budget/backend/pkg/resolver (interfaces: CategoryResolverStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sjanota/budget/backend/pkg/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockCategoryResolverStorage is a mock of CategoryResolverStorage interface
type MockCategoryResolverStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryResolverStorageMockRecorder
}

// MockCategoryResolverStorageMockRecorder is the mock recorder for MockCategoryResolverStorage
type MockCategoryResolverStorageMockRecorder struct {
	mock *MockCategoryResolverStorage
}

// NewMockCategoryResolverStorage creates a new mock instance
func NewMockCategoryResolverStorage(ctrl *gomock.Controller) *MockCategoryResolverStorage {
	mock := &MockCategoryResolverStorage{ctrl: ctrl}
	mock.recorder = &MockCategoryResolverStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCategoryResolverStorage) EXPECT() *MockCategoryResolverStorageMockRecorder {
	return m.recorder
}

// GetEnvelope mocks base method
func (m *MockCategoryResolverStorage) GetEnvelope(arg0 context.Context, arg1, arg2 primitive.ObjectID) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelope", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelope indicates an expected call of GetEnvelope
func (mr *MockCategoryResolverStorageMockRecorder) GetEnvelope(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelope", reflect.TypeOf((*MockCategoryResolverStorage)(nil).GetEnvelope), arg0, arg1, arg2)
}
