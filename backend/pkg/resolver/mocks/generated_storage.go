// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sjanota/budget/backend/pkg/resolver (interfaces: Storage)

// Package mock_resolver is a generated GoMock package.
package mock_resolver

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/sjanota/budget/backend/pkg/models"
	storage "github.com/sjanota/budget/backend/pkg/storage"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockStorage) CreateAccount(arg0 context.Context, arg1 primitive.ObjectID, arg2 *models.AccountInput) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockStorageMockRecorder) CreateAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStorage)(nil).CreateAccount), arg0, arg1, arg2)
}

// CreateBudget mocks base method
func (m *MockStorage) CreateBudget(arg0 context.Context, arg1 string, arg2 models.Month) (*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudget", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBudget indicates an expected call of CreateBudget
func (mr *MockStorageMockRecorder) CreateBudget(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudget", reflect.TypeOf((*MockStorage)(nil).CreateBudget), arg0, arg1, arg2)
}

// CreateCategory mocks base method
func (m *MockStorage) CreateCategory(arg0 context.Context, arg1 primitive.ObjectID, arg2 *models.CategoryInput) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory
func (mr *MockStorageMockRecorder) CreateCategory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStorage)(nil).CreateCategory), arg0, arg1, arg2)
}

// CreateEnvelope mocks base method
func (m *MockStorage) CreateEnvelope(arg0 context.Context, arg1 primitive.ObjectID, arg2 *models.EnvelopeInput) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelope", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvelope indicates an expected call of CreateEnvelope
func (mr *MockStorageMockRecorder) CreateEnvelope(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelope", reflect.TypeOf((*MockStorage)(nil).CreateEnvelope), arg0, arg1, arg2)
}

// CreateExpense mocks base method
func (m *MockStorage) CreateExpense(arg0 context.Context, arg1 models.MonthlyReportID, arg2 *models.ExpenseInput) (*models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense
func (mr *MockStorageMockRecorder) CreateExpense(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockStorage)(nil).CreateExpense), arg0, arg1, arg2)
}

// CreateMonthlyReport mocks base method
func (m *MockStorage) CreateMonthlyReport(arg0 context.Context, arg1 primitive.ObjectID, arg2 models.Month) (*models.MonthlyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonthlyReport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.MonthlyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonthlyReport indicates an expected call of CreateMonthlyReport
func (mr *MockStorageMockRecorder) CreateMonthlyReport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonthlyReport", reflect.TypeOf((*MockStorage)(nil).CreateMonthlyReport), arg0, arg1, arg2)
}

// CreateTransfer mocks base method
func (m *MockStorage) CreateTransfer(arg0 context.Context, arg1 models.MonthlyReportID, arg2 *models.TransferInput) (*models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer
func (mr *MockStorageMockRecorder) CreateTransfer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStorage)(nil).CreateTransfer), arg0, arg1, arg2)
}

// GetAccount mocks base method
func (m *MockStorage) GetAccount(arg0 context.Context, arg1, arg2 primitive.ObjectID) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockStorageMockRecorder) GetAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStorage)(nil).GetAccount), arg0, arg1, arg2)
}

// GetBudget mocks base method
func (m *MockStorage) GetBudget(arg0 context.Context, arg1 primitive.ObjectID) (*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudget", arg0, arg1)
	ret0, _ := ret[0].(*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudget indicates an expected call of GetBudget
func (mr *MockStorageMockRecorder) GetBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudget", reflect.TypeOf((*MockStorage)(nil).GetBudget), arg0, arg1)
}

// GetCategory mocks base method
func (m *MockStorage) GetCategory(arg0 context.Context, arg1, arg2 primitive.ObjectID) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory
func (mr *MockStorageMockRecorder) GetCategory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStorage)(nil).GetCategory), arg0, arg1, arg2)
}

// GetEnvelope mocks base method
func (m *MockStorage) GetEnvelope(arg0 context.Context, arg1, arg2 primitive.ObjectID) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelope", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelope indicates an expected call of GetEnvelope
func (mr *MockStorageMockRecorder) GetEnvelope(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelope", reflect.TypeOf((*MockStorage)(nil).GetEnvelope), arg0, arg1, arg2)
}

// GetExpensesTotalForAccount mocks base method
func (m *MockStorage) GetExpensesTotalForAccount(arg0 context.Context, arg1 models.MonthlyReportID, arg2 primitive.ObjectID) (*models.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesTotalForAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesTotalForAccount indicates an expected call of GetExpensesTotalForAccount
func (mr *MockStorageMockRecorder) GetExpensesTotalForAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesTotalForAccount", reflect.TypeOf((*MockStorage)(nil).GetExpensesTotalForAccount), arg0, arg1, arg2)
}

// GetExpensesTotalForEnvelope mocks base method
func (m *MockStorage) GetExpensesTotalForEnvelope(arg0 context.Context, arg1 models.MonthlyReportID, arg2 primitive.ObjectID) (*models.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesTotalForEnvelope", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesTotalForEnvelope indicates an expected call of GetExpensesTotalForEnvelope
func (mr *MockStorageMockRecorder) GetExpensesTotalForEnvelope(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesTotalForEnvelope", reflect.TypeOf((*MockStorage)(nil).GetExpensesTotalForEnvelope), arg0, arg1, arg2)
}

// GetMonthlyReport mocks base method
func (m *MockStorage) GetMonthlyReport(arg0 context.Context, arg1 models.MonthlyReportID) (*models.MonthlyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyReport", arg0, arg1)
	ret0, _ := ret[0].(*models.MonthlyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyReport indicates an expected call of GetMonthlyReport
func (mr *MockStorageMockRecorder) GetMonthlyReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyReport", reflect.TypeOf((*MockStorage)(nil).GetMonthlyReport), arg0, arg1)
}

// ListBudgets mocks base method
func (m *MockStorage) ListBudgets(arg0 context.Context) ([]*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBudgets", arg0)
	ret0, _ := ret[0].([]*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBudgets indicates an expected call of ListBudgets
func (mr *MockStorageMockRecorder) ListBudgets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgets", reflect.TypeOf((*MockStorage)(nil).ListBudgets), arg0)
}

// UpdateAccount mocks base method
func (m *MockStorage) UpdateAccount(arg0 context.Context, arg1, arg2 primitive.ObjectID, arg3 models.Changes) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockStorageMockRecorder) UpdateAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStorage)(nil).UpdateAccount), arg0, arg1, arg2, arg3)
}

// UpdateCategory mocks base method
func (m *MockStorage) UpdateCategory(arg0 context.Context, arg1, arg2 primitive.ObjectID, arg3 models.CategoryUpdate) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockStorageMockRecorder) UpdateCategory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStorage)(nil).UpdateCategory), arg0, arg1, arg2, arg3)
}

// UpdateEnvelope mocks base method
func (m *MockStorage) UpdateEnvelope(arg0 context.Context, arg1, arg2 primitive.ObjectID, arg3 models.Changes) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvelope indicates an expected call of UpdateEnvelope
func (mr *MockStorageMockRecorder) UpdateEnvelope(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelope", reflect.TypeOf((*MockStorage)(nil).UpdateEnvelope), arg0, arg1, arg2, arg3)
}

// UpdateExpense mocks base method
func (m *MockStorage) UpdateExpense(arg0 context.Context, arg1 models.MonthlyReportID, arg2 primitive.ObjectID, arg3 storage.ChangeSet) (*models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpense", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExpense indicates an expected call of UpdateExpense
func (mr *MockStorageMockRecorder) UpdateExpense(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpense", reflect.TypeOf((*MockStorage)(nil).UpdateExpense), arg0, arg1, arg2, arg3)
}
