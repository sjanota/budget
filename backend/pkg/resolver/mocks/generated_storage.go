// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package mock_resolver is a generated GoMock package.
package mock_resolver

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/sjanota/budget/backend/pkg/models"
	storage "github.com/sjanota/budget/backend/pkg/storage"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateEnvelope mocks base method
func (m *MockStorage) CreateEnvelope(ctx context.Context, budgetID primitive.ObjectID, in *models.EnvelopeInput) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelope", ctx, budgetID, in)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvelope indicates an expected call of CreateEnvelope
func (mr *MockStorageMockRecorder) CreateEnvelope(ctx, budgetID, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelope", reflect.TypeOf((*MockStorage)(nil).CreateEnvelope), ctx, budgetID, in)
}

// GetEnvelope mocks base method
func (m *MockStorage) GetEnvelope(ctx context.Context, budgetID, id primitive.ObjectID) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelope", ctx, budgetID, id)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelope indicates an expected call of GetEnvelope
func (mr *MockStorageMockRecorder) GetEnvelope(ctx, budgetID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelope", reflect.TypeOf((*MockStorage)(nil).GetEnvelope), ctx, budgetID, id)
}

// UpdateEnvelope mocks base method
func (m *MockStorage) UpdateEnvelope(ctx context.Context, budgetID, id primitive.ObjectID, in models.Changes) (*models.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelope", ctx, budgetID, id, in)
	ret0, _ := ret[0].(*models.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvelope indicates an expected call of UpdateEnvelope
func (mr *MockStorageMockRecorder) UpdateEnvelope(ctx, budgetID, id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelope", reflect.TypeOf((*MockStorage)(nil).UpdateEnvelope), ctx, budgetID, id, in)
}

// CreateMonthlyReport mocks base method
func (m *MockStorage) CreateMonthlyReport(ctx context.Context, budgetID primitive.ObjectID, month models.Month, plans []*models.Plan) (*models.MonthlyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonthlyReport", ctx, budgetID, month, plans)
	ret0, _ := ret[0].(*models.MonthlyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonthlyReport indicates an expected call of CreateMonthlyReport
func (mr *MockStorageMockRecorder) CreateMonthlyReport(ctx, budgetID, month, plans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonthlyReport", reflect.TypeOf((*MockStorage)(nil).CreateMonthlyReport), ctx, budgetID, month, plans)
}

// GetMonthlyReport mocks base method
func (m *MockStorage) GetMonthlyReport(ctx context.Context, id models.MonthlyReportID) (*models.MonthlyReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyReport", ctx, id)
	ret0, _ := ret[0].(*models.MonthlyReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyReport indicates an expected call of GetMonthlyReport
func (mr *MockStorageMockRecorder) GetMonthlyReport(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyReport", reflect.TypeOf((*MockStorage)(nil).GetMonthlyReport), ctx, id)
}

// CreateCategory mocks base method
func (m *MockStorage) CreateCategory(ctx context.Context, budgetID primitive.ObjectID, in *models.CategoryInput) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, budgetID, in)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory
func (mr *MockStorageMockRecorder) CreateCategory(ctx, budgetID, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStorage)(nil).CreateCategory), ctx, budgetID, in)
}

// UpdateCategory mocks base method
func (m *MockStorage) UpdateCategory(ctx context.Context, budgetID, id primitive.ObjectID, in models.CategoryUpdate) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, budgetID, id, in)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockStorageMockRecorder) UpdateCategory(ctx, budgetID, id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStorage)(nil).UpdateCategory), ctx, budgetID, id, in)
}

// CreateAccount mocks base method
func (m *MockStorage) CreateAccount(ctx context.Context, budgetID primitive.ObjectID, in *models.AccountInput) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, budgetID, in)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockStorageMockRecorder) CreateAccount(ctx, budgetID, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStorage)(nil).CreateAccount), ctx, budgetID, in)
}

// UpdateAccount mocks base method
func (m *MockStorage) UpdateAccount(ctx context.Context, budgetID, id primitive.ObjectID, in models.Changes) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, budgetID, id, in)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockStorageMockRecorder) UpdateAccount(ctx, budgetID, id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStorage)(nil).UpdateAccount), ctx, budgetID, id, in)
}

// CreateBudget mocks base method
func (m *MockStorage) CreateBudget(ctx context.Context, name string, currentMonth models.Month) (*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudget", ctx, name, currentMonth)
	ret0, _ := ret[0].(*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBudget indicates an expected call of CreateBudget
func (mr *MockStorageMockRecorder) CreateBudget(ctx, name, currentMonth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudget", reflect.TypeOf((*MockStorage)(nil).CreateBudget), ctx, name, currentMonth)
}

// GetBudget mocks base method
func (m *MockStorage) GetBudget(ctx context.Context, id primitive.ObjectID) (*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudget", ctx, id)
	ret0, _ := ret[0].(*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudget indicates an expected call of GetBudget
func (mr *MockStorageMockRecorder) GetBudget(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudget", reflect.TypeOf((*MockStorage)(nil).GetBudget), ctx, id)
}

// ListBudgets mocks base method
func (m *MockStorage) ListBudgets(ctx context.Context) ([]*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBudgets", ctx)
	ret0, _ := ret[0].([]*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBudgets indicates an expected call of ListBudgets
func (mr *MockStorageMockRecorder) ListBudgets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgets", reflect.TypeOf((*MockStorage)(nil).ListBudgets), ctx)
}

// CreateExpense mocks base method
func (m *MockStorage) CreateExpense(ctx context.Context, reportID models.MonthlyReportID, in *models.ExpenseInput) (*models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", ctx, reportID, in)
	ret0, _ := ret[0].(*models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense
func (mr *MockStorageMockRecorder) CreateExpense(ctx, reportID, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockStorage)(nil).CreateExpense), ctx, reportID, in)
}

// GetExpensesTotalForAccount mocks base method
func (m *MockStorage) GetExpensesTotalForAccount(ctx context.Context, reportID models.MonthlyReportID, accountID primitive.ObjectID) (models.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesTotalForAccount", ctx, reportID, accountID)
	ret0, _ := ret[0].(models.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesTotalForAccount indicates an expected call of GetExpensesTotalForAccount
func (mr *MockStorageMockRecorder) GetExpensesTotalForAccount(ctx, reportID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesTotalForAccount", reflect.TypeOf((*MockStorage)(nil).GetExpensesTotalForAccount), ctx, reportID, accountID)
}

// GetExpensesTotalForEnvelope mocks base method
func (m *MockStorage) GetExpensesTotalForEnvelope(ctx context.Context, reportID models.MonthlyReportID, envelopeID primitive.ObjectID) (models.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesTotalForEnvelope", ctx, reportID, envelopeID)
	ret0, _ := ret[0].(models.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesTotalForEnvelope indicates an expected call of GetExpensesTotalForEnvelope
func (mr *MockStorageMockRecorder) GetExpensesTotalForEnvelope(ctx, reportID, envelopeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesTotalForEnvelope", reflect.TypeOf((*MockStorage)(nil).GetExpensesTotalForEnvelope), ctx, reportID, envelopeID)
}

// GetCategory mocks base method
func (m *MockStorage) GetCategory(ctx context.Context, budgetID, categoryID primitive.ObjectID) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, budgetID, categoryID)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory
func (mr *MockStorageMockRecorder) GetCategory(ctx, budgetID, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStorage)(nil).GetCategory), ctx, budgetID, categoryID)
}

// GetAccount mocks base method
func (m *MockStorage) GetAccount(ctx context.Context, budgetID, accountID primitive.ObjectID) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, budgetID, accountID)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockStorageMockRecorder) GetAccount(ctx, budgetID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStorage)(nil).GetAccount), ctx, budgetID, accountID)
}

// UpdateExpense mocks base method
func (m *MockStorage) UpdateExpense(ctx context.Context, reportID models.MonthlyReportID, id primitive.ObjectID, update storage.ChangeSet) (*models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpense", ctx, reportID, id, update)
	ret0, _ := ret[0].(*models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExpense indicates an expected call of UpdateExpense
func (mr *MockStorageMockRecorder) UpdateExpense(ctx, reportID, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpense", reflect.TypeOf((*MockStorage)(nil).UpdateExpense), ctx, reportID, id, update)
}

// CreateTransfer mocks base method
func (m *MockStorage) CreateTransfer(ctx context.Context, reportID models.MonthlyReportID, in *models.TransferInput) (*models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, reportID, in)
	ret0, _ := ret[0].(*models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer
func (mr *MockStorageMockRecorder) CreateTransfer(ctx, reportID, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStorage)(nil).CreateTransfer), ctx, reportID, in)
}

// UpdateTransfer mocks base method
func (m *MockStorage) UpdateTransfer(ctx context.Context, reportID models.MonthlyReportID, id primitive.ObjectID, in storage.ChangeSet) (*models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransfer", ctx, reportID, id, in)
	ret0, _ := ret[0].(*models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransfer indicates an expected call of UpdateTransfer
func (mr *MockStorageMockRecorder) UpdateTransfer(ctx, reportID, id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfer", reflect.TypeOf((*MockStorage)(nil).UpdateTransfer), ctx, reportID, id, in)
}

// GetTransfersTotalForAccount mocks base method
func (m *MockStorage) GetTransfersTotalForAccount(ctx context.Context, reportID models.MonthlyReportID, accountID primitive.ObjectID) (models.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersTotalForAccount", ctx, reportID, accountID)
	ret0, _ := ret[0].(models.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersTotalForAccount indicates an expected call of GetTransfersTotalForAccount
func (mr *MockStorageMockRecorder) GetTransfersTotalForAccount(ctx, reportID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersTotalForAccount", reflect.TypeOf((*MockStorage)(nil).GetTransfersTotalForAccount), ctx, reportID, accountID)
}

// CreatePlan mocks base method
func (m *MockStorage) CreatePlan(ctx context.Context, reportID models.MonthlyReportID, in *models.PlanInput) (*models.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlan", ctx, reportID, in)
	ret0, _ := ret[0].(*models.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlan indicates an expected call of CreatePlan
func (mr *MockStorageMockRecorder) CreatePlan(ctx, reportID, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlan", reflect.TypeOf((*MockStorage)(nil).CreatePlan), ctx, reportID, in)
}

// UpdatePlan mocks base method
func (m *MockStorage) UpdatePlan(ctx context.Context, reportID models.MonthlyReportID, id primitive.ObjectID, changeSet storage.ChangeSet) (*models.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlan", ctx, reportID, id, changeSet)
	ret0, _ := ret[0].(*models.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlan indicates an expected call of UpdatePlan
func (mr *MockStorageMockRecorder) UpdatePlan(ctx, reportID, id, changeSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlan", reflect.TypeOf((*MockStorage)(nil).UpdatePlan), ctx, reportID, id, changeSet)
}

// GetPlansTotalForEnvelope mocks base method
func (m *MockStorage) GetPlansTotalForEnvelope(ctx context.Context, reportID models.MonthlyReportID, id primitive.ObjectID) (models.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlansTotalForEnvelope", ctx, reportID, id)
	ret0, _ := ret[0].(models.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlansTotalForEnvelope indicates an expected call of GetPlansTotalForEnvelope
func (mr *MockStorageMockRecorder) GetPlansTotalForEnvelope(ctx, reportID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlansTotalForEnvelope", reflect.TypeOf((*MockStorage)(nil).GetPlansTotalForEnvelope), ctx, reportID, id)
}

// ReplaceBudget mocks base method
func (m *MockStorage) ReplaceBudget(ctx context.Context, budget *models.Budget) (*models.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceBudget", ctx, budget)
	ret0, _ := ret[0].(*models.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceBudget indicates an expected call of ReplaceBudget
func (mr *MockStorageMockRecorder) ReplaceBudget(ctx, budget interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceBudget", reflect.TypeOf((*MockStorage)(nil).ReplaceBudget), ctx, budget)
}
