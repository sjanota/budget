// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type AccountInput struct {
	Name string `json:"name"`
}

type AccountTransfer struct {
	ID     primitive.ObjectID `json:"id"`
	Date   *string            `json:"date"`
	From   *Account           `json:"from"`
	To     *Account           `json:"to"`
	Amount *Amount            `json:"amount"`
}

type Amount struct {
	Integer int `json:"integer"`
	Decimal int `json:"decimal"`
}

type AmountInput struct {
	Integer int `json:"integer"`
	Decimal int `json:"decimal"`
}

type CategoryInput struct {
	Name       string             `json:"name"`
	EnvelopeID primitive.ObjectID `json:"envelopeID"`
}

type EnvelopeInput struct {
	Name string `json:"name"`
}

type EnvelopeTransfer struct {
	ID     primitive.ObjectID `json:"id"`
	Date   *string            `json:"date"`
	From   *Envelope          `json:"from"`
	To     *Account           `json:"to"`
	Amount *Amount            `json:"amount"`
}

type ExpenseEntry struct {
	Title    string    `json:"title"`
	Category *Category `json:"category"`
	Balance  *Amount   `json:"balance"`
}

type ExpenseEntryInput struct {
	Title      string             `json:"title"`
	CategoryID primitive.ObjectID `json:"categoryID"`
	Balance    *AmountInput       `json:"balance"`
}

type ExpenseEvent struct {
	Type    EventType `json:"type"`
	Expense *Expense  `json:"expense"`
}

type ExpenseInput struct {
	Title        string               `json:"title"`
	Location     *string              `json:"location"`
	Entries      []*ExpenseEntryInput `json:"entries"`
	TotalBalance *AmountInput         `json:"totalBalance"`
	Date         *string              `json:"date"`
	AccountID    *primitive.ObjectID  `json:"accountID"`
}

type EventType string

const (
	EventTypeCreated EventType = "CREATED"
	EventTypeDeleted EventType = "DELETED"
	EventTypeUpdated EventType = "UPDATED"
)

var AllEventType = []EventType{
	EventTypeCreated,
	EventTypeDeleted,
	EventTypeUpdated,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeCreated, EventTypeDeleted, EventTypeUpdated:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
